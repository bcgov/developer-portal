name: Build and update gitops repo for pull-request

env:
  TARGET_FILE: 'values.dev.pr.yaml'
  WORKING_DIR: 'developer-portal'
  YAML_PROPERTY_PATH: '.upstream.backstage.image.tag'
  

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
    branches: [ "pr-deploys" ]

# The workflow can sometimes be triggered twice by adding the label when the PR is created
# If that happens cancel any running workflows and continue with this one    
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true
  
jobs:
  call-build-workflow:
    if: contains(github.event.pull_request.labels.*.name, 'preview')
    uses: ./.github/workflows/build.yaml
    
  update-gitops-pr-file:
    if: contains(github.event.pull_request.labels.*.name, 'preview')
    runs-on: ubuntu-latest
    needs: call-build-workflow
    env:
      BRANCH_NAME: 'auto-updates-${{ github.event.pull_request.number }}'

    steps:
      - name: Setup gitops repo access
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.MANIFEST_REPO_DEPLOY_KEY }}  

      - name: Checkout CD repo
        uses: actions/checkout@v4   
        with:
          repository: ${{ secrets.MANIFEST_REPO }}
          ssh-key: ${{ secrets.MANIFEST_REPO_DEPLOY_KEY }}
          # fetch depth 0 gets all branches and histories. The workflow needs to get the
          # branches because the workflow may run if there were multiple commits to the PR.
          # It needs to checkout the existing branch and update it, rather than creating a 
          # new branch and then getting an error when it pushes to the remote and sees there
          # is an existing branch
          fetch-depth: 0
          ref: pull-requests

      # This assumes that sha was used as a tag in the above job 
      # See https://github.com/docker/metadata-action/issues/164 for discussion about the list
      # of tags returned from metadata-action and using github.sha
      - name: Get short sha
        run: echo "GITHUB_SHA_SHORT="sha-"$(echo ${{ github.sha }} | cut -c -7)" >> $GITHUB_ENV

      - name: 'Configure git'
      # From https://github.com/orgs/community/discussions/26560#discussioncomment-3531273
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: 'Create or checkout branch'
        run: |
          git checkout $BRANCH_NAME || git checkout -b $BRANCH_NAME        

      - name: Update image tag
        run: |
          cd ${{ env.WORKING_DIR }}
          yq -i '${{ env.YAML_PROPERTY_PATH }} = "${{ env.GITHUB_SHA_SHORT }}"' ${{ env.TARGET_FILE }}

      - name: 'Check for changes'
        id: check_for_changes
        run: |
          CHANGES=$(git status --porcelain)
          if [ -z "$CHANGES" ]; then
              echo "No changes"
              echo "HAS_CHANGES=0" >> $GITHUB_OUTPUT
          else
              echo "Has changes"
              echo "HAS_CHANGES=1" >> $GITHUB_OUTPUT
          fi
          
      - name: Commit and push update
        if: ${{ steps.check_for_changes.outputs.HAS_CHANGES == 1 }}
        run: |
          git commit -am "Update image tag for dev"
          git push origin $BRANCH_NAME

      - name: Check if PR exists
        id: check_pr
        run: |
          echo "${{ secrets.MANIFEST_REPO_PAT}}" > token.txt
          gh auth login --with-token < token.txt
          pr=$(gh pr list --repo ${{ secrets.MANIFEST_REPO }} --head ${{ env.BRANCH_NAME }} --json number --jq 'length')
          if ((pr > 0)); then
            echo "EXISTS=true" >> "$GITHUB_OUTPUT"
            echo "PR exists"
          else
            echo "PR does NOT exist"
          fi
      
      - name: Create PR
        if: '!(steps.check_pr.outputs.EXISTS)'
        run: |
          echo "${{ secrets.MANIFEST_REPO_PAT}}" > token.txt
          gh auth login --with-token < token.txt
          gh pr create \
          -B main \
          -H $BRANCH_NAME \
          --title 'Deployment PR created from developer-portal-pr-${{ github.event.pull_request.number }}' \
          --body 'This PR was created automatically by a Github workflow in ${{ github.repository }}. It was created for PR ${{ github.repository }}#${{ github.event.pull_request.number }}. Closing that PR or removing the 'preview' label from it will automatically close this PR.' \
          --label 'preview'

